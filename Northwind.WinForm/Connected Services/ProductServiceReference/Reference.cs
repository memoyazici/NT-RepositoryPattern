//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Northwind.WinForm.ProductServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProductDTO", Namespace="http://schemas.datacontract.org/2004/07/Northwind.DTO")]
    [System.SerializableAttribute()]
    public partial class ProductDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CategoryIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DiscontinuedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProductIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProductNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QuantityPerUnitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<short> ReorderLevelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> SupplierIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<decimal> UnitPriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<short> UnitsInStockField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<short> UnitsOnOrderField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CategoryID {
            get {
                return this.CategoryIDField;
            }
            set {
                if ((this.CategoryIDField.Equals(value) != true)) {
                    this.CategoryIDField = value;
                    this.RaisePropertyChanged("CategoryID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Discontinued {
            get {
                return this.DiscontinuedField;
            }
            set {
                if ((this.DiscontinuedField.Equals(value) != true)) {
                    this.DiscontinuedField = value;
                    this.RaisePropertyChanged("Discontinued");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProductID {
            get {
                return this.ProductIDField;
            }
            set {
                if ((this.ProductIDField.Equals(value) != true)) {
                    this.ProductIDField = value;
                    this.RaisePropertyChanged("ProductID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProductName {
            get {
                return this.ProductNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductNameField, value) != true)) {
                    this.ProductNameField = value;
                    this.RaisePropertyChanged("ProductName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QuantityPerUnit {
            get {
                return this.QuantityPerUnitField;
            }
            set {
                if ((object.ReferenceEquals(this.QuantityPerUnitField, value) != true)) {
                    this.QuantityPerUnitField = value;
                    this.RaisePropertyChanged("QuantityPerUnit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<short> ReorderLevel {
            get {
                return this.ReorderLevelField;
            }
            set {
                if ((this.ReorderLevelField.Equals(value) != true)) {
                    this.ReorderLevelField = value;
                    this.RaisePropertyChanged("ReorderLevel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> SupplierID {
            get {
                return this.SupplierIDField;
            }
            set {
                if ((this.SupplierIDField.Equals(value) != true)) {
                    this.SupplierIDField = value;
                    this.RaisePropertyChanged("SupplierID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> UnitPrice {
            get {
                return this.UnitPriceField;
            }
            set {
                if ((this.UnitPriceField.Equals(value) != true)) {
                    this.UnitPriceField = value;
                    this.RaisePropertyChanged("UnitPrice");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<short> UnitsInStock {
            get {
                return this.UnitsInStockField;
            }
            set {
                if ((this.UnitsInStockField.Equals(value) != true)) {
                    this.UnitsInStockField = value;
                    this.RaisePropertyChanged("UnitsInStock");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<short> UnitsOnOrder {
            get {
                return this.UnitsOnOrderField;
            }
            set {
                if ((this.UnitsOnOrderField.Equals(value) != true)) {
                    this.UnitsOnOrderField = value;
                    this.RaisePropertyChanged("UnitsOnOrder");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ProductServiceReference.IServiceOf_ProductDTO")]
    public interface IServiceOf_ProductDTO {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_ProductDTO/Listing", ReplyAction="http://tempuri.org/IServiceOf_ProductDTO/ListingResponse")]
        Northwind.WinForm.ProductServiceReference.ProductDTO[] Listing();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_ProductDTO/Listing", ReplyAction="http://tempuri.org/IServiceOf_ProductDTO/ListingResponse")]
        System.Threading.Tasks.Task<Northwind.WinForm.ProductServiceReference.ProductDTO[]> ListingAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_ProductDTO/Adding", ReplyAction="http://tempuri.org/IServiceOf_ProductDTO/AddingResponse")]
        bool Adding(Northwind.WinForm.ProductServiceReference.ProductDTO dto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_ProductDTO/Adding", ReplyAction="http://tempuri.org/IServiceOf_ProductDTO/AddingResponse")]
        System.Threading.Tasks.Task<bool> AddingAsync(Northwind.WinForm.ProductServiceReference.ProductDTO dto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_ProductDTO/Updating", ReplyAction="http://tempuri.org/IServiceOf_ProductDTO/UpdatingResponse")]
        bool Updating(Northwind.WinForm.ProductServiceReference.ProductDTO dto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_ProductDTO/Updating", ReplyAction="http://tempuri.org/IServiceOf_ProductDTO/UpdatingResponse")]
        System.Threading.Tasks.Task<bool> UpdatingAsync(Northwind.WinForm.ProductServiceReference.ProductDTO dto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_ProductDTO/Deleting", ReplyAction="http://tempuri.org/IServiceOf_ProductDTO/DeletingResponse")]
        bool Deleting(Northwind.WinForm.ProductServiceReference.ProductDTO dto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_ProductDTO/Deleting", ReplyAction="http://tempuri.org/IServiceOf_ProductDTO/DeletingResponse")]
        System.Threading.Tasks.Task<bool> DeletingAsync(Northwind.WinForm.ProductServiceReference.ProductDTO dto);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceOf_ProductDTOChannel : Northwind.WinForm.ProductServiceReference.IServiceOf_ProductDTO, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceOf_ProductDTOClient : System.ServiceModel.ClientBase<Northwind.WinForm.ProductServiceReference.IServiceOf_ProductDTO>, Northwind.WinForm.ProductServiceReference.IServiceOf_ProductDTO {
        
        public ServiceOf_ProductDTOClient() {
        }
        
        public ServiceOf_ProductDTOClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceOf_ProductDTOClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceOf_ProductDTOClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceOf_ProductDTOClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Northwind.WinForm.ProductServiceReference.ProductDTO[] Listing() {
            return base.Channel.Listing();
        }
        
        public System.Threading.Tasks.Task<Northwind.WinForm.ProductServiceReference.ProductDTO[]> ListingAsync() {
            return base.Channel.ListingAsync();
        }
        
        public bool Adding(Northwind.WinForm.ProductServiceReference.ProductDTO dto) {
            return base.Channel.Adding(dto);
        }
        
        public System.Threading.Tasks.Task<bool> AddingAsync(Northwind.WinForm.ProductServiceReference.ProductDTO dto) {
            return base.Channel.AddingAsync(dto);
        }
        
        public bool Updating(Northwind.WinForm.ProductServiceReference.ProductDTO dto) {
            return base.Channel.Updating(dto);
        }
        
        public System.Threading.Tasks.Task<bool> UpdatingAsync(Northwind.WinForm.ProductServiceReference.ProductDTO dto) {
            return base.Channel.UpdatingAsync(dto);
        }
        
        public bool Deleting(Northwind.WinForm.ProductServiceReference.ProductDTO dto) {
            return base.Channel.Deleting(dto);
        }
        
        public System.Threading.Tasks.Task<bool> DeletingAsync(Northwind.WinForm.ProductServiceReference.ProductDTO dto) {
            return base.Channel.DeletingAsync(dto);
        }
    }
}
